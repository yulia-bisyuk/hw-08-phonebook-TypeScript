{"version":3,"file":"static/js/368.26d9ab41.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","constants/contactValidationSchema.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/EditContactForm/EditContactForm.styled.js","components/EditContactForm/EditContactForm.jsx","components/ContactList/ContactListItem/ListItem.styled.js","components/ContactList/ContactListItem/ListItem.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/UserMenu/UserMenu.styled.js","components/UserMenu/UserMenu.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nconst FormLabel = styled.label`\n  display: block;\n  text-align: center;\n  color: ${props => props.theme.darkGrey};\n  font-weight: 600;\n`;\nconst FormInput = styled.input`\n  display: block;\n  width: 340px;\n  height: 24px;\n  margin-bottom: 24px;\n  margin-top: 8px;\n  padding-left: 8px;\n  border: 1px solid ${props => props.theme.darkBlue};\n  border-radius: 5px;\n`;\nconst SubmitBtn = styled.button`\n  margin-left: auto;\n  margin-right: auto;\n  display: block;\n  width: 148px;\n  height: 40px;\n  border-style: solid;\n  border-radius: 5px;\n  border-width: 2px;\n  border-color: ${props => props.theme.darkBlue};\n  background-color: ${props => props.theme.darkBlue};\n  color: white;\n  font-size: 16px;\n  cursor: pointer;\n  transition-property: transform;\n  transition-duration: 500ms;\n\n  &:hover {\n    transform: scale(1.08);\n  }\n`;\nconst ErrorMessage = styled.div`\n  margin-bottom: 12px;\n  font-weight: 400;\n  font-size: 12px;\n  width: 340px;\n  color: red;\n  text-align: left;\n`;\n\nexport { FormLabel, FormInput, SubmitBtn, ErrorMessage };\n","import * as Yup from 'yup';\n\nexport const contactValidationSchema = Yup.object({\n  name: Yup.string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      '* Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore'\n    )\n    .required('* Required'),\n  number: Yup.string()\n    .matches(\n      /^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\s./0-9]*$/,\n      '* Phone number must be digits and can contain spaces, dashes, parentheses in country code and can start with +'\n    )\n    .required('* Required'),\n});\n","import { Formik } from 'formik';\nimport { contactValidationSchema } from 'constants/contactValidationSchema';\nimport { useSelector } from 'react-redux';\nimport {\n  FormLabel,\n  FormInput,\n  SubmitBtn,\n  ErrorMessage,\n} from './ContactForm.styled';\nimport {\n  useAddContactMutation,\n  useGetContactsQuery,\n} from '../../redux/contacts/contactsApi';\nimport { getToken } from '../../redux/authentication/authSelectors';\n\nconst ContactForm = () => {\n  const token = useSelector(getToken);\n  const [addContact] = useAddContactMutation();\n  const { data: contacts } = useGetContactsQuery(token, {\n    skip: token === null,\n  });\n\n  const handleSubmit = (values, { resetForm }) => {\n    if (\n      contacts.some(\n        contact => contact.name.toLowerCase() === values.name.toLowerCase()\n      )\n    ) {\n      resetForm();\n      return alert(`${values.name} is already in contacts`);\n    }\n\n    addContact({ token: token, name: values.name, number: values.number });\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      validationSchema={contactValidationSchema}\n      onSubmit={(values, actions) => handleSubmit(values, actions)}\n    >\n      {formik => (\n        <form onSubmit={formik.handleSubmit}>\n          <FormLabel>\n            Name\n            <FormInput\n              id=\"name\"\n              name=\"name\"\n              type=\"text\"\n              {...formik.getFieldProps('name')}\n            />\n            {formik.touched.name && formik.errors.name && (\n              <ErrorMessage>{formik.errors.name}</ErrorMessage>\n            )}\n          </FormLabel>\n\n          <FormLabel>\n            Number\n            <FormInput\n              id=\"number\"\n              name=\"number\"\n              type=\"text\"\n              {...formik.getFieldProps('number')}\n            />\n            {formik.touched.number && formik.errors.number && (\n              <ErrorMessage>{formik.errors.number}</ErrorMessage>\n            )}\n          </FormLabel>\n\n          <SubmitBtn type=\"submit\">Add contact</SubmitBtn>\n        </form>\n      )}\n    </Formik>\n  );\n};\n\nexport default ContactForm;\n","import React from 'react';\nimport { FormLabel, FormInput } from '../ContactForm/ContactForm.styled';\nimport { useDispatch } from 'react-redux';\nimport { change } from 'redux/filter/filterSlice';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const onChange = e => {\n    dispatch(change(e.currentTarget.value));\n  };\n\n  return (\n    <FormLabel>\n      Find contacts by name\n      <FormInput\n        autoComplete=\"off\"\n        type=\"text\"\n        name=\"filter\"\n        onChange={onChange}\n        required\n      />\n    </FormLabel>\n  );\n};\n\nexport default Filter;\n","import styled from 'styled-components';\n\nconst InputsWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst FormLabel = styled.label`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 8px;\n  align-items: center;\n  font-size: 14px;\n  color: #323643;\n  font-weight: 600;\n`;\nconst FormInput = styled.input`\n  width: 268px;\n  height: 20px;\n  padding-left: 6px;\n  border: 0.5px solid ${props => props.theme.darkBlue};\n  border-radius: 5px;\n`;\nconst ButtonsWrapper = styled.div`\n  margin-left: 74px;\n  margin-bottom: 16px;\n`;\nconst CancelButton = styled.button`\n  margin-right: 8px;\n  border: 0.5px solid ${props => props.theme.red};\n  border-radius: 5px;\n  background-color: transparent;\n  color: ${props => props.theme.red};\n  cursor: pointer;\n`;\nconst ConfirmButton = styled.button`\n  border: 0.5px solid ${props => props.theme.green};\n  border-radius: 5px;\n  background-color: transparent;\n  color: ${props => props.theme.green};\n  cursor: pointer;\n`;\n\nexport {\n  InputsWrapper,\n  FormLabel,\n  FormInput,\n  ButtonsWrapper,\n  CancelButton,\n  ConfirmButton,\n};\n","import PropTypes from 'prop-types';\nimport { Formik } from 'formik';\nimport { contactValidationSchema } from 'constants/contactValidationSchema';\nimport {\n  useGetContactsQuery,\n  useEditContactMutation,\n} from 'redux/contacts/contactsApi';\nimport {\n  InputsWrapper,\n  FormLabel,\n  FormInput,\n  ButtonsWrapper,\n  CancelButton,\n  ConfirmButton,\n} from './EditContactForm.styled';\nimport { ErrorMessage } from '../ContactForm/ContactForm.styled';\nimport { useSelector } from 'react-redux';\nimport { getToken } from 'redux/authentication/authSelectors';\n\nconst EditContactForm = ({ id, onClose }) => {\n  const [editContact] = useEditContactMutation();\n  const token = useSelector(getToken);\n\n  const { data: contacts } = useGetContactsQuery(token, {\n    skip: token === null,\n  });\n  const contact = contacts.find(contact => contact.id === id);\n\n  const handleSubmit = values => {\n    editContact({\n      contactId: id,\n      token: token,\n      name: values.name,\n      number: values.number,\n    });\n\n    onClose();\n  };\n\n  return (\n    contact && (\n      <Formik\n        initialValues={{ name: contact.name, number: contact.number }}\n        validationSchema={contactValidationSchema}\n        onSubmit={values => handleSubmit(values)}\n      >\n        {formik => (\n          <form onSubmit={formik.handleSubmit} autoComplete=\"off\">\n            <InputsWrapper>\n              <FormLabel >\n                Name\n                <FormInput\n                  id=\"name\"\n                  name=\"name\"\n                  type=\"text\"\n                  {...formik.getFieldProps('name')}\n                />\n              </FormLabel>\n              <div>\n                {formik.touched.name && formik.errors.name ? (\n                  <ErrorMessage>{formik.errors.name}</ErrorMessage>\n                ) : null}\n              </div>\n\n              <FormLabel >\n                Number\n                <FormInput\n                  id=\"number\"\n                  name=\"number\"\n                  type=\"text\"\n                  {...formik.getFieldProps('number')}\n                />\n              </FormLabel>\n              <div>\n                {formik.touched.number && formik.errors.number ? (\n                  <ErrorMessage>{formik.errors.number}</ErrorMessage>\n                ) : null}\n              </div>\n            </InputsWrapper>\n\n            <ButtonsWrapper>\n              <CancelButton type=\"button\" onClick={onClose}>\n                Cancel\n              </CancelButton>\n\n              <ConfirmButton type=\"submit\">Confirm</ConfirmButton>\n            </ButtonsWrapper>\n          </form>\n        )}\n      </Formik>\n    )\n  );\n};\n\nEditContactForm.propTypes = {\n  id: PropTypes.string.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default EditContactForm;\n","import styled from 'styled-components';\n\nconst LiItem = styled.li`\n  list-style-type: none;\n  width: 340px;\n  display: flex;\n  justify-content: space-between;\n  font-weight: 500;\n  font-size: 16px;\n  color: ${props => props.theme.darkBlue};\n\n  &:not(:last-child) {\n    margin-bottom: 8px;\n  }\n`;\n\nconst ActionButton = styled.button`\n  padding: 0;\n  background-color: transparent;\n  border: none;\n  cursor: pointer;\n  :not(:first-child) {\n    margin-left: 8px;\n  }\n`;\nconst ButtonsWrapper = styled.div`\n  display: flex;\n`;\n\nexport { ActionButton, LiItem, ButtonsWrapper };\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport EditContactForm from 'components/EditContactForm';\nimport { ImCancelCircle } from 'react-icons/im';\nimport { FiEdit } from 'react-icons/fi';\nimport { IconContext } from 'react-icons';\nimport { ActionButton, LiItem, ButtonsWrapper } from './ListItem.styled';\nimport { useDeleteContactMutation } from '../../../redux/contacts/contactsApi';\nimport { getToken } from 'redux/authentication/authSelectors';\nimport { useSelector } from 'react-redux';\n\nconst ListItem = ({ id, name, phone }) => {\n  const [editFormIsOpen, setEditFormIsOpen] = useState(false);\n  const [deleteContact] = useDeleteContactMutation();\n  const token = useSelector(getToken);\n\n  return (\n    <>\n      <LiItem id={id} key={id}>\n        {name}: {phone}\n        <ButtonsWrapper>\n          <IconContext.Provider value={{ color: '#00420b', size: '18px' }}>\n            <ActionButton type=\"button\" onClick={() => setEditFormIsOpen(true)}>\n              <FiEdit />\n            </ActionButton>\n          </IconContext.Provider>\n          <IconContext.Provider value={{ color: '#bc2525', size: '18px' }}>\n            <ActionButton\n              type=\"button\"\n              onClick={() => deleteContact({ contactId: id, token: token })}\n            >\n              <ImCancelCircle />\n            </ActionButton>\n          </IconContext.Provider>\n        </ButtonsWrapper>\n      </LiItem>\n\n      {editFormIsOpen && (\n        <div>\n          <EditContactForm onClose={() => setEditFormIsOpen(false)} id={id} />\n        </div>\n      )}\n    </>\n  );\n};\n\nListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  phone: PropTypes.string.isRequired,\n};\n\nexport default ListItem;\n","import styled from 'styled-components';\n\nconst List = styled.ul`\n  width: 100%;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 0px;\n`;\n\nexport { List };\n","import { useGetContactsQuery } from '../../redux/contacts/contactsApi';\nimport { useSelector } from 'react-redux';\nimport { getFilterValue } from 'redux/filter/filterSlice';\nimport LiItem from './ContactListItem';\nimport { List } from './ContactList.styled';\nimport { getToken } from 'redux/authentication/authSelectors';\n\nconst ContactList = () => {\n  const filter = useSelector(getFilterValue);\n  const token = useSelector(getToken);\n  const { data: contacts, isSuccess } = useGetContactsQuery(token, {\n    skip: token === null,\n  });\n\n  const getFilteredContacts = () => {\n    if (isSuccess)\n      return contacts.filter(contact =>\n        contact.name.toLowerCase().includes(filter.trim().toLowerCase())\n      );\n  };\n\n  const filteredContacts = getFilteredContacts();\n\n  return (\n    <List>\n      {filteredContacts &&\n        filteredContacts.map(({ id, name, number }) => (\n          <LiItem key={id} id={id} name={name} phone={number}/>\n        ))}\n    </List>\n  );\n};\n\nexport default ContactList;\n","import styled from 'styled-components';\n\nconst WelcomeText = styled.p`\n  text-align: center;\n  font-weight: 600;\n  color: ${props => props.theme.darkGrey};\n`;\n\nconst UserEmail = styled.span`\n  margin-bottom: 8px;\n  font-size: 18px;\n  display: block;\n  color: ${props => props.theme.darkBlue};\n`;\nconst LogOutBtn = styled.button`\n  margin-bottom: 30px;\n  margin-left: auto;\n  margin-right: auto;\n  display: block;\n  border: 0.5px solid ${props => props.theme.red};\n  border-radius: 5px;\n  background-color: transparent;\n  color: ${props => props.theme.red};\n  cursor: pointer;\n`;\n\nexport { WelcomeText, UserEmail, LogOutBtn };\n","import { WelcomeText, UserEmail, LogOutBtn } from './UserMenu.styled';\nimport { useLogOutMutation } from 'redux/authentication/authApi';\nimport { getUserName, getToken } from '../../redux/authentication/authSelectors';\nimport { useSelector } from 'react-redux';\n\nconst UserMenu = () => {\n  const name = useSelector(getUserName);\n  const token = useSelector(getToken);\n  const [logOut] = useLogOutMutation();\n\n  return (\n    <div>\n      <LogOutBtn\n        onClick={() => {\n          logOut(token);\n        }}\n      >\n        LogOut\n      </LogOutBtn>\n      <WelcomeText>\n        <UserEmail>{name},</UserEmail>welcome to your\n      </WelcomeText>\n    </div>\n  );\n};\n\nexport default UserMenu;\n","import ContactForm from 'components/ContactForm';\nimport Filter from 'components/Filter';\nimport ContactList from 'components/ContactList';\nimport UserMenu from 'components/UserMenu';\nimport BeatLoader from 'react-spinners/BeatLoader';\nimport {\n  PhonebookTitle,\n  ContactsTitle,\n  Section,\n  Note,\n} from './ContactsPage.styled';\nimport {\n  getIsLoggedIn,\n  getToken,\n} from '../../redux/authentication/authSelectors';\nimport { useSelector } from 'react-redux';\nimport { useGetContactsQuery } from '../../redux/contacts/contactsApi';\n\nconst ContactsPage = () => {\n  const token = useSelector(getToken);\n  const isLoggedIn = useSelector(getIsLoggedIn);\n  const {\n    data: contacts,\n    isFetching,\n    isError,\n    isSuccess,\n  } = useGetContactsQuery(token, { skip: token === null });\n\n  return (\n    <>\n      <Section>\n        {isLoggedIn && <UserMenu />}\n        <PhonebookTitle>Phonebook</PhonebookTitle>\n        <ContactForm />\n      </Section>\n\n      <Section>\n        <ContactsTitle>Contacts</ContactsTitle>\n        <Filter />\n\n        {isError && <Note>Oops! Something went wrong...</Note>}\n\n        {isFetching && (\n          <Note>\n            <BeatLoader color={'#0c005a'} loading={true} size={10} margin={2} />\n          </Note>\n        )}\n\n        {isSuccess && contacts.length === 0 && <Note>No contacts here</Note>}\n\n        {isSuccess && <ContactList />}\n      </Section>\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["FormLabel","styled","props","theme","darkGrey","FormInput","darkBlue","SubmitBtn","ErrorMessage","contactValidationSchema","Yup","name","matches","required","number","token","useSelector","getToken","useAddContactMutation","addContact","contacts","useGetContactsQuery","skip","data","initialValues","validationSchema","onSubmit","values","actions","resetForm","some","contact","toLowerCase","alert","handleSubmit","formik","id","type","getFieldProps","touched","errors","dispatch","useDispatch","autoComplete","onChange","e","change","currentTarget","value","InputsWrapper","ButtonsWrapper","CancelButton","red","ConfirmButton","green","onClose","useEditContactMutation","editContact","find","contactId","onClick","LiItem","ActionButton","phone","useState","editFormIsOpen","setEditFormIsOpen","useDeleteContactMutation","deleteContact","color","size","List","filter","getFilterValue","isSuccess","filteredContacts","includes","trim","getFilteredContacts","map","WelcomeText","UserEmail","LogOutBtn","getUserName","useLogOutMutation","logOut","isLoggedIn","getIsLoggedIn","isFetching","isError","loading","margin","length"],"sourceRoot":""}